local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local dataRemoteEvent = ReplicatedStorage:WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent")

local castleCFrame = CFrame.new(432.6329, 4384.6372, -1898.6741)
local desertCFrame = CFrame.new(463.8988, 4383.7646, -1888.2440)

local Window = Rayfield:CreateWindow({
    Name = "xnxsmoke Hub",
    LoadingTitle = "xnxsmoke Loader",
    LoadingSubtitle = "by xnxsmoke",
    ConfigurationSaving = { Enabled = true, FileName = "InfiniteModesHub", AutoSave = true },
})

local CastleTab = Window:CreateTab("InfCastle", 4483362458)
local DesertTab = Window:CreateTab("InfDesert", 4483362458)

local startingCastle = false
local startingDesert = false
local standCastleEnabled = false
local standDesertEnabled = false
local autoRestartCastleEnabled = false
local autoRestartDesertEnabled = false
local lastRestartCastle = 0
local lastRestartDesert = 0
local RESTART_COOLDOWN = 5

local function safeStandAt(cf)
    local char = player.Character
    if char and char:FindFirstChild("HumanoidRootPart") then
        pcall(function() char.HumanoidRootPart.CFrame = cf end)
    end
end

local function safeFire(args)
    pcall(function() dataRemoteEvent:FireServer(unpack(args)) end)
end

local function startInfiniteCastle()
    if startingCastle then return end
    startingCastle = true
    safeFire({ { { Event = "InfiniteCastleAction", Action = "Create" } } })
    task.wait(1)
    safeFire({ { { Dungeon = 3604563306, Event = "InfiniteCastleAction", Action = "Start" } } })
    task.wait(2)
    startingCastle = false
end

local function startInfiniteDesert()
    if startingDesert then return end
    startingDesert = true
    safeFire({ { { Event = "InfiniteModeAction", Action = "Create" } } })
    task.wait(1)
    safeFire({ { { Dungeon = 3604563306, Event = "InfiniteModeAction", Action = "Start" } } })
    task.wait(2)
    startingDesert = false
end

local function restartInfiniteCastleSequence()
    if tick() - lastRestartCastle < RESTART_COOLDOWN then return end
    if startingCastle then
        task.spawn(function() task.wait(1) restartInfiniteCastleSequence() end)
        return
    end
    startingCastle = true
    safeFire({ { { Event = "InfiniteCastleAction", Action = "Leave" } } })
    task.wait(1.6)
    safeFire({ { { Event = "InfiniteCastleAction", Action = "Create" } } })
    task.wait(1)
    safeFire({ { { Dungeon = 3604563306, Event = "InfiniteCastleAction", Action = "Start" } } })
    lastRestartCastle = tick()
    task.wait(2)
    startingCastle = false
end

local function restartInfiniteDesertSequence()
    if tick() - lastRestartDesert < RESTART_COOLDOWN then return end
    if startingDesert then
        task.spawn(function() task.wait(1) restartInfiniteDesertSequence() end)
        return
    end
    startingDesert = true
    safeFire({ { { Event = "InfiniteModeAction", Action = "Leave" } } })
    task.wait(1.6)
    safeFire({ { { Event = "InfiniteModeAction", Action = "Create" } } })
    task.wait(1)
    safeFire({ { { Dungeon = 3604563306, Event = "InfiniteModeAction", Action = "Start" } } })
    lastRestartDesert = tick()
    task.wait(2)
    startingDesert = false
end

CastleTab:CreateButton({
    Name = "Start Infinite Castle (Manual)",
    Callback = startInfiniteCastle
})

CastleTab:CreateToggle({
    Name = "Auto-Restart (on Portal Destroyed)",
    CurrentValue = false,
    Flag = "AutoRestartCastleFlag",
    Callback = function(Value)
        autoRestartCastleEnabled = Value
    end
})

CastleTab:CreateToggle({
    Name = "Stand in the Middle (Use only in InfCastle)",
    CurrentValue = false,
    Flag = "StandCastleFlag",
    Callback = function(Value)
        standCastleEnabled = Value
        if Value and not startingCastle then safeStandAt(castleCFrame) end
    end
})

DesertTab:CreateButton({
    Name = "Start Infinite Desert (Manual)",
    Callback = startInfiniteDesert
})

DesertTab:CreateToggle({
    Name = "Auto-Restart (on Portal Destroyed)",
    CurrentValue = false,
    Flag = "AutoRestartDesertFlag",
    Callback = function(Value)
        autoRestartDesertEnabled = Value
    end
})

DesertTab:CreateToggle({
    Name = "Stand in the Middle (Use only in InfDesert)",
    CurrentValue = false,
    Flag = "StandDesertFlag",
    Callback = function(Value)
        standDesertEnabled = Value
        if Value and not startingDesert then safeStandAt(desertCFrame) end
    end
})

task.spawn(function()
    while true do
        task.wait(0.25)
        if standCastleEnabled and not startingCastle then
            safeStandAt(castleCFrame)
        elseif standDesertEnabled and not startingDesert then
            safeStandAt(desertCFrame)
        end
    end
end)

player.CharacterAdded:Connect(function()
    task.wait(0.8)
    if standCastleEnabled and not startingCastle then safeStandAt(castleCFrame) end
    if standDesertEnabled and not startingDesert then safeStandAt(desertCFrame) end
end)

dataRemoteEvent.OnClientEvent:Connect(function(...)
    local args = {...}
    local function recursiveCheck(tbl)
        if type(tbl) ~= "table" then return end
        for k, v in pairs(tbl) do
            if type(v) == "table" then
                recursiveCheck(v)
            elseif k == "Message" and type(v) == "string" then
                local msg = v:upper()
                if msg:find("PORTAL DESTROYED") then
                    if autoRestartCastleEnabled then task.spawn(restartInfiniteCastleSequence) end
                    if autoRestartDesertEnabled then task.spawn(function() task.wait(0.5) restartInfiniteDesertSequence() end) end
                    return
                end
            end
        end
    end
    for _, v in ipairs(args) do recursiveCheck(v) end
end)

Rayfield:LoadConfiguration("InfiniteModesHub")
