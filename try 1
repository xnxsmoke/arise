local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

local restartAtWave = 5
local autoStartEnabled = false
local autoRestartEnabled = false

local Window = Rayfield:CreateWindow({
    Name = "InfiniteCastle Hub",
    LoadingTitle = "InfiniteCastle Loader",
    LoadingSubtitle = "by xnxsmoke",
    ConfigurationSaving = {
        Enabled = true,
        FileName = "InfiniteCastleHub"
    },
})

local MainTab = Window:CreateTab("Main", 4483362458)

-- Toggle per Avvia Auto InfiniteCastle (stile switch)
MainTab:CreateToggle({
    Name = "Auto InfiniteCastle",
    CurrentValue = false,
    Callback = function(Value)
        autoStartEnabled = Value
        if autoStartEnabled then
            Rayfield:Notify({Title="Auto InfiniteCastle", Content="Auto-InfiniteCastle avviato!", Duration=3})
            startInfiniteCastle()
        else
            Rayfield:Notify({Title="Auto InfiniteCastle", Content="Auto-InfiniteCastle fermato!", Duration=3})
        end
    end,
})

-- Slider fino a 200
MainTab:CreateSlider({
    Name = "Wave per Restart",
    Range = {1, 200},
    Increment = 1,
    CurrentValue = 5,
    Flag = "RestartWave",
    Callback = function(Value)
        restartAtWave = Value
    end,
})

-- Toggle per Auto-Restart Castle (stile switch)
MainTab:CreateToggle({
    Name = "Auto-Restart Castle",
    CurrentValue = false,
    Callback = function(Value)
        autoRestartEnabled = Value
        if autoRestartEnabled then
            Rayfield:Notify({Title="Auto-Restart", Content="Controllo wave attivo!", Duration=3})
            spawn(function()
                while autoRestartEnabled do
                    local wave = getCurrentWave()
                    if autoStartEnabled and wave >= restartAtWave then
                        Rayfield:Notify({Title="Restart!", Content="Raggiunta wave "..wave..". Riavvio...", Duration=3})
                        restartCastle()
                        wait(3)
                        startInfiniteCastle()
                    end
                    wait(1)
                end
            end)
        else
            Rayfield:Notify({Title="Auto-Restart", Content="Auto-Restart fermato!", Duration=3})
        end
    end,
})

function startInfiniteCastle()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local dataRemoteEvent = ReplicatedStorage:WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent")
    local createArgs = {
        {
            {
                Event = "InfiniteCastleAction",
                Action = "Create"
            },
            "\r"
        }
    }
    dataRemoteEvent:FireServer(unpack(createArgs))
    wait(2)
    local startArgs = {
        {
            {
                Dungeon = 3604563306,
                Event = "InfiniteCastleAction",
                Action = "Start"
            },
            "\r"
        }
    }
    dataRemoteEvent:FireServer(unpack(startArgs))
end

function restartCastle()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local dataRemoteEvent = ReplicatedStorage:WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent")
    local leaveArgs = {
        {
            {
                Event = "InfiniteCastleAction",
                Action = "Leave"
            },
            "\r"
        }
    }
    dataRemoteEvent:FireServer(unpack(leaveArgs))
    wait(2)
end

function getCurrentWave()
    local gui = game.Players.LocalPlayer.PlayerGui:FindFirstChild("InfiniteCastleGui")
    if gui then
        for _,v in ipairs(gui:GetDescendants()) do
            if v:IsA("TextLabel") and v.Name:lower():find("wave") and v.Text:match("%d+") then
                return tonumber(v.Text:match("%d+"))
            end
        end
    end
    return 1
end
